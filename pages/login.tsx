import {
  border,
  Box,
  Flex,
  Icon,
  InputLeftAddon,
  InputRightAddon,
  InputRightElement,
  Link,
  Stack,
  Text,
  useToast,
  useTheme,
} from "@chakra-ui/react";
import {
  AiOutlineEyeInvisible,
  AiOutlineEye,
  AiOutlineReload,
} from "react-icons/ai";
import { SyntheticEvent, useState } from "react";
import { NextPageContext } from "next";
import Head from "next/head";
import NextLink from "next/link";
import { useFormik } from "formik";
import * as yup from "yup";
import axios from "axios";
import { useRouter } from "next/router";
import FormInput from "../components/Forms/FormInput";
import HeaderTag from "../components/HeaderTag";
import Layout from "../components/Layout";
import Wrapper from "../components/Wrapper";
import { Btn } from "../components/Button";
import { FaChevronRight } from "react-icons/fa";
import { endpoint } from "../api_routes";
import { AMAHLUBI_ACCESS_TOKEN } from "../constants";
import { setTheCookie } from "helpers/cookieHandler";
import withAuth from "../middleware/withAuth";

function login() {
  const theme = useTheme();
  const toast = useToast();
  const router = useRouter();
  const { black, white } = theme.colors.brand;
  const [passwordVisible, setPasswordVisible] = useState(false);

  const validationSchema = yup.object().shape({
    email: yup.string().trim().email().required("Email Address is required"),
    password: yup.string().trim().required("Password is required"),
  });

  const {
    handleSubmit,
    handleChange,
    handleBlur,
    isSubmitting,
    errors,
    touched,
  } = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema,
    onSubmit: async (values, formikHelpers) => {
      try {
        const response = await axios.post(endpoint.LOGIN, values);

        if (response.status === 200) {
          // store access token in cookie
          setTheCookie(
            AMAHLUBI_ACCESS_TOKEN,
            response.data?.message?.accessToken
          );

          toast({
            title: "Login",
            description: "Login successful",
            status: "success",
            duration: 4000,
            isClosable: true,
            position: "top-right",
          });

          // Could redirect the user
          router.push("/community");

          formikHelpers.resetForm();
        }
      } catch (error) {
        // show server side errors
        let statusCodeErr = [400, 422, 429, 500];

        if (statusCodeErr.find((code) => code === error.response.status)) {
          // alert the error message
          const { message } = error.response.data;
          toast({
            title: "An error occurred.",
            description: message,
            status: "error",
            duration: 4000,
            isClosable: true,
            position: "top-right",
          });
        }
      }
    },
  });

  const togglePasswordVisiblity = (e: SyntheticEvent) => {
    e.preventDefault();
    setPasswordVisible(!passwordVisible);
  };

  return (
    <div>
      <Head>
        <title>Create Account - AmaHlubi </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <Wrapper>
          <Flex
            justifyContent="center"
            alignItems="center"
            flexDir="column"
            pos="relative"
            zIndex={1}
          >
            <HeaderTag mb="1.8rem" fontWeight="600" letterSpacing="unset">
              Sigin into to your Account
            </HeaderTag>
            <Box
              bg="whiteAlpha.900"
              padding="5rem 3.2rem"
              borderRadius="2xl"
              maxW="60.3rem"
              w="100%"
              mt="3rem"
            >
              <HeaderTag
                mt="unset"
                letterSpacing="unset"
                fontSize="1.7rem"
                mb="1.8rem"
                fontWeight="600"
                color="black"
              >
                Enter your login details
              </HeaderTag>
              <form onSubmit={handleSubmit}>
                <Stack spacing="2.7rem">
                  <Flex
                    alignItems="center"
                    flexDir={["column", "column", "column", "row"]}
                  >
                    <FormInput
                      // label="First Name"
                      containerProps={{
                        flexDir: "column",
                        // mr: ["0", "0", "0", "3.9rem"],
                      }}
                      labelProps={{
                        alignSelf: "flex-start",
                        borderRight: "unset",
                        fontSize: "1.1rem",
                        fontWeight: "800",
                      }}
                      inputProps={{
                        id: "email",
                        name: "email",
                        type: "email",
                        onChange: handleChange,
                        onBlur: handleBlur,
                        isInvalid: !!errors.email && touched.email,
                        borderRadius: "md",
                        border: `1px solid ${black} !important`,
                        p: "2.3rem",
                        color: black,
                        placeholder: "Email Address",
                        _placeholder: {
                          color: black,
                          fontWeight: "bold",
                        },
                      }}
                      formErrorMessage={errors.email}
                    />
                  </Flex>

                  <Flex alignItems="center" flexDir="column">
                    <FormInput
                      containerProps={{
                        flexDir: "column",
                      }}
                      labelProps={{
                        alignSelf: "flex-start",
                        borderRight: "unset",
                        fontSize: "1.1rem",
                        fontWeight: "800",
                      }}
                      inputProps={{
                        id: "password",
                        name: "password",
                        onChange: handleChange,
                        onBlur: handleBlur,
                        isInvalid: !!errors.password && touched.password,
                        placeholder: "Password",
                        type: passwordVisible ? "text" : "password",
                        borderRadius: "md",
                        border: `1px solid ${black} !important`,

                        p: "2.3rem",
                        color: black,
                        _placeholder: {
                          color: black,
                          fontWeight: "bold",
                        },
                      }}
                      formErrorMessage={errors.password}
                      inputRightAddon={
                        <InputRightElement
                          onClick={(e) => togglePasswordVisiblity(e)}
                          as="button"
                          height="100%"
                          mr="1rem"
                          bg="transparent"
                          color={black}
                          children={
                            passwordVisible ? (
                              <AiOutlineEyeInvisible size="2rem" />
                            ) : (
                              <AiOutlineEye size="2rem" />
                            )
                          }
                        />
                      }
                    />
                    <HeaderTag
                      alignSelf="flex-end"
                      letterSpacing="unset"
                      as="h3"
                      fontSize="1.1rem"
                      fontFamily="Montserrat"
                      fontWeight="semibold"
                      mt="1rem"
                      mb="1.4rem"
                      color="black"
                    >
                      <NextLink href="/password/reset">
                        <Link>
                          <Icon mb="-0.2rem" mr=".2rem" as={AiOutlineReload} />
                          Reset forgotten password
                        </Link>
                      </NextLink>
                    </HeaderTag>
                  </Flex>

                  <Flex justifyContent="center">
                    <Btn
                      isLoading={isSubmitting}
                      type="submit"
                      fontFamily="Roboto"
                      fontWeight="400"
                      borderRadius="lg"
                      fontSize="1.2rem"
                      maxW="20.6rem"
                      w="100%"
                      textAlign="center"
                      bgColor={black}
                      color={white}
                      border={black}
                      px="1.8rem"
                      py="1.5rem"
                      // _hover={{ backgroundColor: "black", opacity: ".7" }}
                      rightIcon={<Icon as={FaChevronRight} />}
                    >
                      Log me in
                    </Btn>
                  </Flex>
                </Stack>
              </form>

              <NextLink href="/login">
                <Link role="group" textDecoration="none">
                  <HeaderTag
                    color={black}
                    letterSpacing="unset"
                    as="h3"
                    fontSize="1.4rem"
                    fontFamily="Montserrat"
                  >
                    I don't have an account?
                    <Text
                      _groupHover={{ textDecor: "underline" }}
                      ml=".3rem"
                      fontWeight="bold"
                      as="span"
                    >
                      Sign me up
                    </Text>
                  </HeaderTag>
                </Link>
              </NextLink>
            </Box>
          </Flex>
        </Wrapper>
      </Layout>
    </div>
  );
}

export default login;

export const getServerSideProps = withAuth(async (context: NextPageContext) => {
  return {
    props: {},
  };
});
