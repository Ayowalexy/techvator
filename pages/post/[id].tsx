import Head from "next/head";
import {
  Flex,
  IconButton,
  Img,
  useTheme,
  Container,
  Box,
  Text,
  Heading,
} from "@chakra-ui/react";
import { NextPageContext } from "next";

import { useEffect, useMemo } from "react";
import { useRecoilState, useSetRecoilState } from "recoil";
import { AuthAtom, User } from "recoilStore/AuthAtom";
import axios from "axios";
// import Container from '@/components/Container'
import Layout from "@/components/Layout";
import CommunityContentLayout from "@/components/Dashboard/CommunityContentLayout";
import CommunityLeftSidebar from "@/components/Dashboard/CommunityLeftSidebar";
import CommunityRightSidebar from "@/components/Dashboard/CommunityRightSidebar";
import CommunityMainContent from "@/components/Dashboard/CommunityMainContent";
import withAuth from "middleware/withAuth";
import { endpoint } from "api_routes";
import { Post, PostAtom, PostsAtom } from "recoilStore/PostsAtom";
import { Btn } from "@/components/Button";
import Activity from "@/components/Dashboard/Activity";
import { useRouter } from "next/router";

function post(props: any) {
  const router = useRouter();
  const theme = useTheme();
  const setAuth = useSetRecoilState(AuthAtom);
  const [post, setPost] = useRecoilState(PostAtom);
  const { secondaryBlack } = theme.colors.brand;

  useEffect(() => {
    if (props.initialRecoilState?.user) {
      setAuth({
        token: props?.initialRecoilState?.user?.token,
        refreshToken: props?.initialRecoilState?.user?.refreshToken,
        ...props?.initialRecoilState?.user,
      });
    }
  }, [props.initialRecoilState?.user]);

  useEffect(() => {
    if (props.initialRecoilState?.post) {
      setPost({
        ...props.initialRecoilState?.post,
        image: [{ dataUrl: props.initialRecoilState?.post?.image }],
      });
    }
  }, [props.initialRecoilState?.posts]);

  // useMemo(() => {
  //   const context = typeof window !== "undefined" ? "client" : "server";
  //   console.log(`<${context}> [initialRecoilState]`, props.initialRecoilState);

  //   initialRecoilState = props.initialRecoilState; // Overwrite the global mutable variable
  // }, []);

  return (
    <div>
      <Head>
        <title>{post?.content}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Box bg={secondaryBlack["200"]}>
          <Container
            maxW="120em"
            px={{ base: "1rem", lg: "4rem" }}
            bg={secondaryBlack["300"]}
          >
            <Flex
              minH={{
                base: "calc(100vh - 7.2rem)",
                lg: "calc(100vh - (8rem + 6.4rem) )",
              }}
              py={{ lg: "5.7rem" }}
              flexDir={{ base: "column", lg: "row" }}
              gap="1.5rem"
            >
              <CommunityLeftSidebar />
              <Box mx="auto" w={{ lg: "68.6rem" }}>
                <Box>
                  <Flex align="center" justify="space-between">
                    <Btn
                      onClick={router.back}
                      bgColor="transparent"
                      borderColor="white"
                    >
                      Back to Post
                    </Btn>
                    <Heading>Comments</Heading>
                  </Flex>
                  <Activity post={post} />
                </Box>
              </Box>
            </Flex>
          </Container>
        </Box>
      </Layout>
    </div>
  );
}

export default post;

export const getServerSideProps = withAuth(
  async (context: NextPageContext & { user: User }) => {
    let user: User | null = null;
    let post: Post | null = null;

    if (context?.user) {
      user = context.user;
      try {
        const response = await axios.get(
          endpoint.POSTS + "/" + context.query?.id,
          {
            headers: {
              Authorization: `Bearer ${user.token}`,
              "x-refresh-token": user.refreshToken,
            },
          }
        );

        if (response.status === 200) {
          post = response.data?.message;
        }
      } catch (error) {}
    }

    return {
      props: {
        initialRecoilState: { user, post },
      },
    };
  }
);
